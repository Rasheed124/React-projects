// Creating endpoint for fetching "You May Also Like" products
app.get('/likelyproduct/:productId', async (req, res) => {
  try {
    const productId = req.params.productId;
    const product = await Product.findById(productId);

    if (!product) {
      return res.status(404).send({ error: "Product not found" });
    }

    const recommendedProducts = await Product.find({
      category: product.category,
      _id: { $ne: productId }
    }).limit(5); 

    console.log("Recommended products retrieved");

    res.status(200).send(recommendedProducts);
  } catch (error) {
    console.error("Error retrieving recommended products:", error);
    res.status(500).send({ error: "Internal Server Error" });
  }
});
// Creating endpoint for New Collections Data
app.get('/newcollection', async (req, res) => {
  try {
    // Fetch products sorted by 'createdAt' or a similar field indicating newness
    let products = await Product.find({}).sort({ createdAt: -1 }).limit(5); // Adjust the limit as needed
    console.log("New collection products retrieved");

    res.status(200).send(products);
  } catch (error) {
    console.error("Error retrieving new collection products:", error);
    res.status(500).send({ error: "Internal Server Error" });
  }
});
